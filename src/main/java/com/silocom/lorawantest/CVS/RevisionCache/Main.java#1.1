package com.silocom.lorawantest;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;

import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

/**
 *
 * @author hvarona
 */
public class Main {

    private static final String ALGORITHM = "AES";

    private static final byte[] networkKey = new byte[]{(byte) 0x8D, (byte) 0xD1,
        (byte) 0x11, (byte) 0xEA, (byte) 0x9E, (byte) 0xA3, (byte) 0xBA,
        (byte) 0xB8, (byte) 0xC0, (byte) 0x4F, (byte) 0x90, (byte) 0xCC,
        (byte) 0x9A, (byte) 0xB7, (byte) 0xF9, (byte) 0x58};

    private static final byte[] appSessionKey = new byte[]{(byte) 0x39,
        (byte) 0x0D, (byte) 0x71, (byte) 0x60, (byte) 0x9A, (byte) 0x10,
        (byte) 0x46, (byte) 0x4A, (byte) 0x12, (byte) 0x6F, (byte) 0x52,
        (byte) 0xA0, (byte) 0x33, (byte) 0xE1, (byte) 0x70, (byte) 0xE4};

    private IvParameterSpec ivParameterSpec;
    private SecretKeySpec secretKeySpec;
    private Cipher cipher;

    public static void main(String args[]) throws Exception {
        LoraWanReceiver rec = new LoraWanReceiver(networkKey, appSessionKey);
        System.out.println(rec.decodeMessage("QFdUUAGAjAABG+5rEvWd3/0U05RRqcMBwks/Sw=="));
        /*Main main = new Main();
        String encriptValue = main.encrypt("Envio de prueba");
        System.out.println("Encriptado : " + encriptValue);
        System.out.println(main.decrypt(encriptValue));
        //System.out.println(main.decrypt("EvWd3/0U05RRqcMBwks/Sw=="));
        byte[] message = new byte[]{(byte) 0x1B, (byte) 0xEE,
            (byte) 0x6B, (byte) 0x12, (byte) 0xF5, (byte) 0x9D, (byte) 0xDF,
            (byte) 0xFD, (byte) 0x14, (byte) 0xD3, (byte) 0x94, (byte) 0x51,
            (byte) 0xA9, (byte) 0xC3, (byte) 0x01};
        System.out.println(main.decrypt(message));*/

    }

    public Main() {
        try {
            ivParameterSpec = new IvParameterSpec(new byte[]{(byte) 0x01, (byte) 0x00,
                (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                (byte) 0x57, (byte) 0x54, (byte) 0x50, (byte) 0x01,
                (byte) 0x8C, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                (byte) 0x00, (byte) 0x01});
            secretKeySpec = new SecretKeySpec(appSessionKey, "AES");
            cipher = Cipher.getInstance("AES/CTR/PKCS5Padding");
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String encrypt(String toBeEncrypt) throws NoSuchPaddingException, NoSuchAlgorithmException,
            InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);
        byte[] encrypted = cipher.doFinal(toBeEncrypt.getBytes());
        return Base64.encodeBase64String(encrypted);
    }

    public String decrypt(String encrypted) throws InvalidAlgorithmParameterException, InvalidKeyException,
            BadPaddingException, IllegalBlockSizeException {
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);
        return new String(cipher.doFinal(Base64.decodeBase64(encrypted)));
    }

    public String decrypt(byte[] array) throws InvalidAlgorithmParameterException, InvalidKeyException,
            BadPaddingException, IllegalBlockSizeException {
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);
        return new String(cipher.doFinal(array));
    }
}
